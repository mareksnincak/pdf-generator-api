name: CI/CD
on:
  workflow_dispatch:
  pull_request:
  push:
    branches: main
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: npm audit
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: npm ci
      - run: npm run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: sudo apt-get update
      - run: |
          sudo apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2 \
          libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 \
          libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 \
          libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 \
          libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 \
          libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release \
          xdg-utils wget
      - run: npm ci
        env:
          PUPPETEER_SKIP_DOWNLOAD: true
      - run: ldd chrome | grep not
      - run: npm run test
  test-it:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: npm ci
      - run: npm run test:it
  deploy:
    # TODO use OIDC provider https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: npm ci
      - uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,arm'
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'
      - run: npm run deploy:prod
        env:
          REQUIRE_APPROVAL: never
          ENVIRONMENT_NAME: ${{ secrets.ENVIRONMENT_NAME }}
      - uses: actions/upload-artifact@v4
        with:
          name: cdk-output
          path: ./infra/cdk/cdk.output.json
  test-e2e:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - run: npm ci
      - uses: actions/download-artifact@v4
        with:
          name: cdk-output
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'
      - name: npm run test:e2e
        run: |
          E2E_BASE_URL=$(jq -r '.[].apiUrl' ./cdk.output.json) \
          E2E_AUTH_USER_POOL_ID=$(jq -r '.[].userPoolId' ./cdk.output.json) \
          E2E_AUTH_USER_POOL_CLIENT_ID=$(jq -r '.[].userPoolClientId' ./cdk.output.json) \
          E2E_AUTH_USER_CREDENTIALS_SECRET_NAME=$(jq -r '.[].defaultUserCredentialsSecretName' ./cdk.output.json) \
          npm run test:e2e
